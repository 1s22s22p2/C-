#include <iostream>

#define Log(x)	std::cout<<x<<std::endl;

struct Vector2
{
	float x, y;
};

class String
{
private:
	char* m_Buffer;
	unsigned int m_Size;
public:
	//String(const String& other)    //拷贝构造函数，如果不写，那么会有一个默认的函数（浅拷贝）
	//	:m_Buffer(other.m_Buffer),m_Size(other.m_Size) {}     //默认是这样
	//String(const String& other) = delete;  //这样可以删除拷贝构造函数
	String(const String& other)
		:m_Size(other.m_Size)
	{
		std::cout << "Copied String!" << std::endl;
		m_Buffer = new char[m_Size+1];
		memcpy(m_Buffer, other.m_Buffer, m_Size + 1);
	}

	String(const char* string)
	{
		m_Size = strlen(string);
		m_Buffer = new char[m_Size+1];
		/*for (int i = 0; i < m_Size+1; i++)
		{
			m_Buffer[i] = string[i];
		}*/
		memcpy(m_Buffer, string, m_Size+1);      //与上面等效
	}

	char& operator[](unsigned int index)
	{
		return m_Buffer[index];
	}

	friend std::ostream& operator<<(std::ostream& stream, const String& string);

	~String()
	{
		delete[] m_Buffer;
	}

};

std::ostream& operator<<(std::ostream& stream, const String& string)
{
	stream << string.m_Buffer;
	return stream;
}

//void PrintString(String string)
//{
//	std::cout << string << std::endl;
//}      
//会多次复制

void PrintString(const String& string)   //尽量通过const引用传递变量，我们可以在这个函数内部加String copy=string来复制
{
	std::cout << string << std::endl;
}

int main()
{
	{
		int a = 2;
		int b = a;     //复制，a,b有不同的地址
		b = 3;         //即使赋值给b也不会改变a

		Vector2 c = { 2,3 };
		Vector2 d = c;
		d.x = 5;

		Vector2* e = new Vector2();
		Vector2* f = e;
		/*f++;*/             //e指针不变,影响指针
		f->x = 2;             //同时影响e,f，影响内存
	}
	{
		String string = "Cherno";
		String second = string;
		//会报错，因为会有复制原理是把后者类成员变量，复制到一个新的内存地址里面
		//所以对char*变量也进行了复制，所以内存中的这两个变量有一样的值，即相同的内存地址
		//m_Buffer的内存地址对于这两个String（对象）是相同的
		//当作用域到尽头时，析构函数就会调用，然后执行delete[] m_Buffer两次，两次释放同一个内存块，因为内存已经释放了，我们无法再次释放它
		//我们真正需要做的时分配一个新的char数组，来存储复制的字符串，而我们现在做的是复制指针；只不过是shadow copy（浅拷贝），要改为（deep copy）深拷贝
		second[2] = 'a';
		//浅拷贝不会去到指针的内容或者指针所指的地方，也不会复制它
		//深拷贝根据定义是复制整个对象
		//可以写克隆，但是今天用拷贝构造函数

		PrintString(string);
		PrintString(second);
	}
	std::cin.get();
}