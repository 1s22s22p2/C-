如何创建对象
面向对象程序设计以对象为核心，该方法认为程序由一系列对象组成。 类是对现实世界的抽象，包括表示静态属性的数据和对数据的操作，对象是类的实例化。

C++在创建对象时，它需要占用一些内存，即使我们写了一个空的类，我们创建对象也至少要1个字节

应用程序的内存分为两部分：堆和栈

栈（stack）对象有一个自动的生存周期，他们的生存周期由它声明的地方的作用域决定（一般很小，只有几兆）
堆（heap）在堆上分配要比在栈上分配花费更长的时间，而且必须再手动释放内存

#include <iostream>

#define Log(x)	std::cout<<x<<std::endl;

using String = std::string;

class Entity
{
private:
	String m_name;
public:
	Entity()
		:m_name("Unknown") 
	{
		std::cout << "construct 1" << std::endl;
	}
	Entity(const String& name)         //const string可以引用字符串常量,string不可以,因为如果string想要引用就要改成（（string&）cherno）
		:m_name(name) 
	{
		std::cout << "construct 2" << std::endl;
	}
	const String& GetName() const
	{
		return m_name;
	}
};

int main()
{
	Entity* e;
	{
		//栈分配
		Entity entity;
		Entity entity1("cherno");
		Entity entity2 = Entity("cherno");   //这个语句也只调用一次构造函数
		e = &entity2;
		std::cout << entity2.GetName() << std::endl;

		//堆分配
		Entity* entity3 = new Entity("cherno");    //new Entity的意思是我们在堆上分配了内存，然后我们用Entity*创建了一个指针指向该内存
		e = entity3;                               //e=&entity也可以
		std::cout << (*entity3).GetName() << std::endl;
	/*	std::cout << entity3->GetName() << std::endl;*/
	
	}                                        //生存域不一定是函数，也可以是if语句，甚至空作用域
	/*delete entity; */   //这里定义的entity指针超过了它的作用域，所以销毁，但是它所指向的那部分内存依旧被占用
	delete e;             //如果忘记delete就会导致内存泄露

	//std::cin.get();
	//{
	//	int* x = new int;
	//}
	//delete x;
}

//如果对象非常大，或者想要显式地控制对象的生存周期，那么在堆上创建，否则在栈上，可以自动回收，也很快