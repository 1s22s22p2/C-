理想项目设置：如果你签出我的远程数据库，我的代码仓库，你应该在存储库中有需要的东西以便能够直接编
                       译和运行项目的应用程序
克隆存贮库，然后使之能够编译和运行
在实际解决方案中的实际项目文件夹中保留使用库的版本（有那些物理二进制文件或代码的副本）
对大多数重要的项目，推荐实际构建源代码，在vs中可以添加另一个项目，然后将其编译为静态或动态库
如果拿不到源代码，或者项目只是快速项目，不想花太多时间来设置它，那么使用链接二进制文件，更快更容易
windows可以使用二进制文件，而Linux和mac往往只能用源代码
库选择32位（*86）或者64位与我们电脑本身无关，取决于我们要编译的程序，否则无法正确链接

库通常有两个部分includes和library，即包含目录（包含目录是一堆头文件，使我们可以使用预先构建的二进
制文件中的函数）和库目录（那些预先构建的二进制文件），这里通常有两部分动态库和静态库（不是所有库
都提供这两者）
动态库的动态链接放入dll（动态链接库），单独文件，在运行时要放在exe文件旁边或者某个地方
静态库的静态链接放入exe（可执行文件），被编译或者链接到exe中，技术上更快（因为会自动优化链接）
我们必须把项目指向包含文件，然后还要将链接器指向库文件

在项目文件里面新建一个Dependencies,见P49
在lib-vc.2015中既有dll文件也有lib文件，lib实际上是一种静态链接库，它与dll一起工作，这样我们就不需要
实际询问dll，它包含了dll所有的函数，符号的位置，这样我们可以在编译时链接他们，但是即使没有lib我们
还是可以使用dll文件

为了使用包含目录，要将属性/C++/常规/附加包含目录中输入$(SolutionDir)Dependencies\GLFW\include
然后再头文件中输入#include "GLFW/glfw3.h"

把这一步做完，调用glfw3.h中的函数时可以编译，但是会出现link error因为包含目录中只有函数声明，要添
加库文件

库文件在属性/链接器/常规和输入中设置在常规中修改附加库目录，在输入中修改附加依赖项





#include <iostream>
//#include "GLFW/glfw3.h"   
//<>与""本质上没有区别，如果是引号的话会检查相对路径，如果没有找到任何相对于main.cpp的文件，它就会检查编译器的include路径
//所以如果源文件是在解决方案的某个地方就用就用""，如果它是一个完整的外部依赖，或者外部的库，不在visual studio中和我们的解决方案一起编译，那么就用<>,来表示它是外部的
extern "C" int glfwInit();     //想要调用这个函数也可以直接在这里声明，但是要写上extern "C",因为GLWF是一个C语言库 
 
#define Log(x)	std::cout<<x<<std::endl;

int main()
{
	int a = glfwInit();
	Log(a);
	std::cin.get();
}

//头文件为我们提供了声明，告诉我们有那些函数可以用，库文件，提供了函数的定义，这样我们可以链接到那些函数